
contract EnforceOutput {
    bytes requiredScript;
    int requiredValue;

    // constructor
    constructor(bytes script, int value) {
        this.requiredScript = script;
        this.requiredValue = value;
    }

    /*
    * unlock
    * preimage is the sig hash preimage for the current input and transaction.
    * outputsBytes is the serialization of all of the outputs of the current transaction.
    */
    public function unlock(bytes outputsBytes, SigHashPreimage preimage) {
        // TODO Add time lock for refund

        // TODO Add lock with smart contract agent key

        // bytes hash = hash256(preimage);
        // Sig signature = Util.sign(this.privateKey, hash);
        // require(checkSig(signature, this.publicKey));


        // Verify preimage is correct.
        require(Tx.checkPreimageOpt(preimage));

        // Verify the hash of outputs matches the preimage.
        require(hash256(outputsBytes) == hashOutputs(preimage));
        
        // Parse outputs for the data we want to ensure is there.
        // Without a loop this requires the first output to be the match.

        // Satoshi value of output is first 8 bytes of output data (little endian).
        int value = unpack(outputsBytes[:8]+b'00'); // add leading zero because it is unsigned.
        require(value == this.requiredValue);

        // Variable length int for size of script.
        int offset = 9; // 8 byte satoshi value plus minimum one byte scriptSize.
        bytes scriptLenBytes = readVarIntBytes(outputsBytes[8:]);
        if(len(scriptLenBytes) != 1) {
            offset+=len(scriptLenBytes); // add additional scriptSize length
        }

        int scriptSize = unpack(scriptLenBytes);
        require(outputsBytes[offset:offset+scriptSize] == this.requiredScript);
    }

    static function enforceFirstOutput(bytes outputsBytes, int requiredValue, bytes requiredScript): bool {
        // Parse outputs for the data we want to ensure is there.
        // Without a loop this requires the first output to be the match.
        bool result = true;

        // Satoshi value of output is first 8 bytes of output data (little endian).
        int value = unpack(outputsBytes[:8]+b'00'); // add leading zero because it is unsigned.
        if(value != requiredValue) {
            result = false;
        }

        // Variable length int for size of script.
        int offset = 9; // 8 byte satoshi value plus minimum one byte scriptSize.
        bytes scriptLenBytes = readVarIntBytes(outputsBytes[8:]);
        if(len(scriptLenBytes) != 1) {
            offset+=len(scriptLenBytes); // add additional scriptSize length
        }

        int scriptSize = unpack(scriptLenBytes);
        if (outputsBytes[offset:offset+scriptSize] != requiredScript) {
            result = false;
        }

        return result;
    }

    static function hashOutputs(SigHashPreimage preimage) : bytes {
        int l = len(preimage);
        return preimage[l - 40 : l - 8];
    }

    // readVarIntBytes reads a Bitcoin (P2P Network) variable sized integer and returns the bytes 
    // that represent the value.
    // For any bytes value with a length of more than one, an extra byte was also used, so to pop
    // the value from a bytes value an extra byte must be removed.
    static function readVarIntBytes(bytes b): bytes {
        bytes ret = b'00';

        if (b[:1] == b'ff') {
            ret = b[1:9];
        } else if (b[:1] == b'fe') {
            ret = b[1:5];
        } else if (b[:1] == b'fd') {
            ret = b[1:3];
        } else {
            ret = b[:1];
        }

        return ret;
    }
}